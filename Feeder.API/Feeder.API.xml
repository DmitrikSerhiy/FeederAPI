<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Feeder.API</name>
    </assembly>
    <members>
        <member name="T:Feeder.API.Controllers.CollectionController">
            <summary>
                Handle all http requests with collections 
            </summary>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.#ctor(Freeder.BLL.Services.CollectionService,Freeder.BLL.Services.SourceService,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Used consructor injection to get all needed services 
            </summary>
            <param name="CollectionService"></param>
            <param name="SourceService"></param>
            <param name="LoggerFactory"></param>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.GetCollection(System.String)">
            <summary>
                Get specific collection
            </summary>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.GetCollections">
            <summary>
                Get all collections without sources
            </summary>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.ViewCollection(System.String)">
            <summary>
                Get specific collecton with included sources and feeds
            </summary>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.AddCollection(System.String)">
            <summary>
                Add new collection
            </summary>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.AddSourceToCollection(System.String,System.String)">
            <summary>
                Add existed source to the specific collection
            </summary>
            <param name="collectionName"></param>
            <param name="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.DeleteSourceFromCollection(System.String,System.String)">
            <summary>
                Delete source from collection
            </summary>
            <param name="collectionName"></param>
            <param name="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.UpdateCollectionName(System.String,System.String)">
            <summary>
                Update collection name
            </summary>
            <param name="collectionName"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.CollectionController.DeleteCollection(System.String)">
            <summary>
                Delete specific collection
            </summary>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="T:Feeder.API.Controllers.SourceController">
            <summary>
                Just for developers: becauce all the http methods returns Source entity without included feeeds
                Use this to fill database with new sources
            </summary>
        </member>
        <member name="M:Feeder.API.Controllers.SourceController.#ctor(Freeder.BLL.Services.SourceService,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Used consructor injection to get all needed services 
            </summary>
            <param name="SourceService"></param>
            <param name="LoggerFactory"></param>
        </member>
        <member name="M:Feeder.API.Controllers.SourceController.GetSource(System.String)">
            <summary>
                Get specific source without feeds
            </summary>
            <param name="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.SourceController.GetSources">
            <summary>
                Get all sources without feeds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Feeder.API.Controllers.SourceController.AddSource(System.String,System.String)">
            <summary>
                Add new source
            </summary>
            <param name="sourceName">Name of the real site</param>
            <param name="url">Link to the real site</param>
            <returns></returns>
        </member>
        <member name="T:Feeder.Controllers.FeedController">
            <summary>
                Handle all http requests with feeds 
            </summary>
        </member>
        <member name="M:Feeder.Controllers.FeedController.#ctor(Freeder.BLL.Services.FeedService,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Used consructor injection to get all needed services 
            </summary>
            <param name="FeedService"></param>
            <param name="LoggerFactory"></param>
        </member>
        <member name="M:Feeder.Controllers.FeedController.GetFeed(System.String,System.String)">
            <summary>
                Get specific feed by name and publish date
            </summary>
            <param name="feedTitle"></param>
            <param name="feedPublishDate"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.Controllers.FeedController.GetFeeds(System.String)">
            <summary>
                Get all feeds for specific source
            </summary>
            <param name="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Feeder.Controllers.FeedController.AddFeeds(System.String,System.String)">
            <summary>
                Fill specific source with feeds
            </summary>
            <param name="sourceName"></param>
            <param name="type">RSS or Atom</param>
            <returns></returns>
        </member>
        <member name="M:Feeder.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Set the logger
                Set all dependincies
                Added swagger integration
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
